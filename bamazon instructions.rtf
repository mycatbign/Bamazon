{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sl240\slmult1\f0\fs22\lang9 BAMAZON\par
\par
Customer\par
Manager\par
Supervisor\par
- folder for each\par
- each folder has its own node_modules and package.json\par
Node.js & MySQL\par
\par
Overview\par
In this activity, you'll be creating an Amazon-like storefront with the MySQL skills you learned this unit. The app will take in orders from customers and deplete stock from the store's inventory. As a bonus task, you can program your app to track product sales across your store's departments and then provide a summary of the highest-grossing departments in the store.\par
Make sure you save and require the MySQL and Inquirer npm packages in your homework files--your app will need them for data input and storage.\par
\par
Submission Guide\par
Make sure you use the normal GitHub. Because this is a CLI App, there will be no need to deploy it to Heroku. This time, though, you need to include screenshots, a gif, and/or a video showing us that you got the app working with no bugs. You can include these screenshots or a link to a video in a README.md file.\par
Include screenshots (or a video) of typical user flows through your application (for the customer and if relevant the manager/supervisor). This includes views of the prompts and the responses after their selection (for the different selection options).\par
Include any other screenshots you deem necessary to help someone who has never been introduced to your application understand the purpose and function of it. This is how you will communicate to potential employers/other developers in the future what you built and why, and to show how it works. \par
Because screenshots (and well-written READMEs) are extremely important in the context of GitHub, this will be part of the grading.\par
If you haven't written a markdown file yet, click here for a rundown, or just take a look at the raw file of these instructions.\par
\par
Submission on BCS\par
Please submit the link to the Github Repository!\par
\par
Instructions\par
\par
Challenge #1: Customer View (Minimum Requirement)\par
Create a MySQL Database called bamazon.\par
Then create a Table inside of that database called products.\par
The products table should have each of the following columns:\par
item_id (unique id for each product)\par
product_name (Name of product)\par
department_name\par
price (cost to customer)\par
stock_quantity (how much of the product is available in stores)\par
Populate this database with around 10 different products. (i.e. Insert "mock" data rows into this database and table).\par
Then create a Node application called bamazonCustomer.js. Running this application will first display all of the items available for sale. Include the ids, names, and prices of products for sale.\par
The app should then prompt users with two messages.\par
The first should ask them the ID of the product they would like to buy.\par
The second message should ask how many units of the product they would like to buy.\par
Once the customer has placed the order, your application should check if your store has enough of the product to meet the customer's request.\par
If not, the app should log a phrase like Insufficient quantity!, and then prevent the order from going through.\par
However, if your store does have enough of the product, you should fulfill the customer's order.\par
This means updating the SQL database to reflect the remaining quantity.\par
Once the update goes through, show the customer the total cost of their purchase.\par
If this activity took you between 8-10 hours, then you've put enough time into this assignment. Feel free to stop here -- unless you want to take on the next challenge.\par
\par
Challenge #2: Manager View (Next Level)\par
Create a new Node application called bamazonManager.js. Running this application will:\par
List a set of menu options:\par
View Products for Sale\par
View Low Inventory\par
Add to Inventory\par
Add New Product\par
If a manager selects View Products for Sale, the app should list every available item: the item IDs, names, prices, and quantities.\par
If a manager selects View Low Inventory, then it should list all items with an inventory count lower than five.\par
If a manager selects Add to Inventory, your app should display a prompt that will let the manager "add more" of any item currently in the store.\par
If a manager selects Add New Product, it should allow the manager to add a completely new product to the store.\par
If you finished Challenge #2 and put in all the hours you were willing to spend on this activity, then rest easy! Otherwise continue to the next and final challenge.\par
\par
Challenge #3: Supervisor View (Final Level)\par
Create a new MySQL table called departments. Your table should include the following columns:\par
department_id\par
department_name\par
over_head_costs (A dummy number you set for each department)\par
Modify the products table so that there's a product_sales column, and modify your bamazonCustomer.js app so that when a customer purchases anything from the store, the price of the product multiplied by the quantity purchased is added to the product's product_sales column.\par
Make sure your app still updates the inventory listed in the products column.\par
Create another Node app called bamazonSupervisor.js. Running this application will list a set of menu options:\par
View Product Sales by Department\par
Create New Department\par
When a supervisor selects View Product Sales by Department, the app should display a summarized table in their terminal/bash window. Use the table below as a guide.\par
department_id\par
department_name\par
over_head_costs\par
product_sales\par
total_profit\par
01\par
Electronics\par
10000\par
20000\par
10000\par
02\par
Clothing\par
60000\par
100000\par
40000\par
The total_profit column should be calculated on the fly using the difference between over_head_costs and product_sales. total_profit should not be stored in any database. You should use a custom alias.\par
If you can't get the table to display properly after a few hours, then feel free to go back and just add total_profit to the departments table.\par
Hint: You may need to look into aliases in MySQL.\par
Hint: You may need to look into GROUP BYs.\par
Hint: You may need to look into JOINS.\par
HINT: There may be an NPM package that can log the table to the console. What's is it? Good question :)\par
\par
Reminder: Submission on BCS\par
Please submit the link to the Github Repository!\par
\par
Minimum Requirements\par
Attempt to complete homework assignment as described in instructions. If unable to complete certain portions, please pseudocode these portions to describe what remains to be completed. Adding a README.md as well as adding this homework to your portfolio are required as well and more information can be found below.\par
\par
Create a README.md\par
Add a README.md to your repository describing the project. Here are some resources for creating your README.md. Here are some resources to help you along the way:\par
About READMEs\par
Mastering Markdown\par
\par
Add To Your Portfolio\par
After completing the homework please add the piece to your portfolio. Make sure to add a link to your updated portfolio in the comments section of your homework so the TAs can easily ensure you completed this step when they are grading the assignment. To receive an 'A' on any assignment, you must link to it from your portfolio.\par
\par
One More Thing\par
If you have any questions about this project or the material we have covered, please post them in the community channels in slack so that your fellow developers can help you! If you're still having trouble, you can come to office hours for assistance from your instructor and TAs.\par
Good Luck!\par
}
 